From 5e4150826fea6f37276f348c65d94ce4847d1211 Mon Sep 17 00:00:00 2001
From: Kumataro <Kumataro@users.noreply.github.com>
Date: Sat, 7 Oct 2023 10:11:25 +0900
Subject: [PATCH] 3rdparty: supporting protobuf v22 and later

Upstream-Status: Submitted [https://github.com/opencv/opencv/pull/24372]
---
 cmake/OpenCVFindProtobuf.cmake | 37 ++++++++++++++++++++++++++++++++++
 modules/dnn/CMakeLists.txt     |  9 +++++++++
 2 files changed, 46 insertions(+)

Index: git/cmake/OpenCVFindProtobuf.cmake
===================================================================
--- git.orig/cmake/OpenCVFindProtobuf.cmake
+++ git/cmake/OpenCVFindProtobuf.cmake
@@ -67,6 +67,40 @@ else()
   endif()
 endif()
 
+# See https://github.com/opencv/opencv/issues/24369
+# In Protocol Buffers v22.0 and later drops C++11 support and depends abseil-cpp.
+#   Details: https://protobuf.dev/news/2022-08-03/
+# And if std::text_view is in abseil-cpp requests C++17 and later.
+
+if(HAVE_PROTOBUF)
+    if("${Protobuf_VERSION}" MATCHES [[[0-9]+.([0-9]+).[0-9]+]])
+        string(COMPARE GREATER "${CMAKE_MATCH_1}" "21" REQUEST_ABSL)  # >=22
+
+        if(REQUEST_ABSL)
+            string(COMPARE GREATER "${CMAKE_CXX_STANDARD}" "16" USED_AFTER_CXX17)  # >=17
+
+            if(NOT USED_AFTER_CXX17)
+                message("CMAKE_CXX_STANDARD : ${CMAKE_CXX_STANDARD}")
+                message("protobuf           : ${Protobuf_VERSION}")
+                message(FATAL_ERROR "protobuf(v22 and later) and abseil-cpp request CMAKE_CXX_STANDARD=17 and later.")
+            endif()
+
+            ocv_check_modules(ABSL_STRINGS absl_strings)
+            if(NOT ABSL_STRINGS_FOUND)
+                message(FATAL_ERROR "protobuf(v22 and later) requests abseil-cpp(strings), but missing.")
+            endif()
+
+            ocv_check_modules(ABSL_LOG absl_log)
+            if(NOT ABSL_LOG_FOUND)
+                message(FATAL_ERROR "protobuf(v22 and later) requests abseil-cpp(log), but missing.")
+            endif()
+
+        endif()
+    else()
+        message(FATAL_ERROR "Protobuf version(${Protobuf_VERSION}) is unexpected to split.")
+    endif()
+endif()
+
 if(HAVE_PROTOBUF AND PROTOBUF_UPDATE_FILES AND NOT COMMAND PROTOBUF_GENERATE_CPP)
   message(FATAL_ERROR "Can't configure protobuf dependency (BUILD_PROTOBUF=${BUILD_PROTOBUF} PROTOBUF_UPDATE_FILES=${PROTOBUF_UPDATE_FILES})")
 endif()
Index: git/modules/dnn/CMakeLists.txt
===================================================================
--- git.orig/modules/dnn/CMakeLists.txt
+++ git/modules/dnn/CMakeLists.txt
@@ -133,6 +133,15 @@ if(NOT BUILD_PROTOBUF)
   list(APPEND include_dirs ${Protobuf_INCLUDE_DIRS})
 endif()
 
+if(HAVE_ABSL_STRINGS)
+  list(APPEND libs ${ABSL_STRINGS_LIBRARIES})
+  list(APPEND include_dirs ${ABSL_STRTRINGS_INCLUDE_DIRS})
+endif()
+if(HAVE_ABSL_LOG)
+  list(APPEND libs ${ABSL_LOG_LIBRARIES})
+  list(APPEND include_dirs ${ABSL_LOG_INCLUDE_DIRS})
+endif()
+
 set(sources_options "")
 
 list(APPEND libs ${LAPACK_LIBRARIES})
@@ -226,6 +235,12 @@ ocv_create_module(${libs} ${dnn_runtime_
 ocv_add_samples()
 ocv_add_accuracy_tests(${dnn_runtime_libs})
 
+if(NOT BUILD_PROTOBUF)
+  if(TARGET opencv_test_dnn)
+    ocv_target_compile_definitions(opencv_test_dnn PRIVATE "OPENCV_DNN_EXTERNAL_PROTOBUF=1")
+  endif()
+endif()
+
 set(perf_path "${CMAKE_CURRENT_LIST_DIR}/perf")
 file(GLOB_RECURSE perf_srcs "${perf_path}/*.cpp")
 file(GLOB_RECURSE perf_hdrs "${perf_path}/*.hpp" "${perf_path}/*.h")
@@ -280,3 +295,4 @@ if(TARGET ocv.3rdparty.cann AND OPENCV_T
     ocv_target_link_libraries(opencv_test_dnn ocv.3rdparty.cann)
   endif()
 endif()
+
Index: git/modules/dnn/test/test_layers.cpp
===================================================================
--- git.orig/modules/dnn/test/test_layers.cpp
+++ git/modules/dnn/test/test_layers.cpp
@@ -754,11 +754,15 @@ TEST_F(Layer_RNN_Test, get_set_test)
 
 TEST_P(Test_Caffe_layers, Accum)
 {
+#ifdef OPENCV_DNN_EXTERNAL_PROTOBUF
+    throw SkipTestException("Requires patched protobuf");
+#else
     if (backend == DNN_BACKEND_OPENCV && target != DNN_TARGET_CPU)
         applyTestTag(CV_TEST_TAG_DNN_SKIP_OPENCL, CV_TEST_TAG_DNN_SKIP_OPENCL_FP16);
 
     testLayerUsingCaffeModels("accum", false, false, 0.0, 0.0, 2);
     testLayerUsingCaffeModels("accum_ref", false, false, 0.0, 0.0, 2);
+#endif
 }
 
 TEST_P(Test_Caffe_layers, FlowWarp)
@@ -778,27 +782,39 @@ TEST_P(Test_Caffe_layers, ChannelNorm)
 
 TEST_P(Test_Caffe_layers, DataAugmentation)
 {
+#ifdef OPENCV_DNN_EXTERNAL_PROTOBUF
+    throw SkipTestException("Requires patched protobuf");
+#else
     if (backend == DNN_BACKEND_OPENCV && target == DNN_TARGET_OPENCL_FP16)
         applyTestTag(CV_TEST_TAG_DNN_SKIP_OPENCL_FP16);
     testLayerUsingCaffeModels("data_augmentation", true, false);
     testLayerUsingCaffeModels("data_augmentation_2x1", true, false);
     testLayerUsingCaffeModels("data_augmentation_8x6", true, false);
+#endif
 }
 
 TEST_P(Test_Caffe_layers, Resample)
 {
+#ifdef OPENCV_DNN_EXTERNAL_PROTOBUF
+    throw SkipTestException("Requires patched protobuf");
+#else
     if (backend != DNN_BACKEND_OPENCV)
         applyTestTag(CV_TEST_TAG_DNN_SKIP_IE_NN_BUILDER, CV_TEST_TAG_DNN_SKIP_IE_NGRAPH);
     testLayerUsingCaffeModels("nearest_2inps", false, false, 0.0, 0.0, 2);
     testLayerUsingCaffeModels("nearest", false, false);
+#endif
 }
 
 TEST_P(Test_Caffe_layers, Correlation)
 {
+#ifdef OPENCV_DNN_EXTERNAL_PROTOBUF
+    throw SkipTestException("Requires patched protobuf");
+#else
     if (backend == DNN_BACKEND_OPENCV && target == DNN_TARGET_OPENCL_FP16)
         applyTestTag(CV_TEST_TAG_DNN_SKIP_IE_NGRAPH, CV_TEST_TAG_DNN_SKIP_IE_NN_BUILDER,
                      CV_TEST_TAG_DNN_SKIP_OPENCL, CV_TEST_TAG_DNN_SKIP_OPENCL_FP16);
     testLayerUsingCaffeModels("correlation", false, false, 0.0, 0.0, 2);
+#endif
 }
 
 TEST_P(Test_Caffe_layers, Convolution2Inputs)
@@ -1639,12 +1655,11 @@ private:
     int outWidth, outHeight, zoomFactor;
 };
 
-#ifndef OPENCV_DNN_EXTERNAL_PROTOBUF
 TEST_P(Test_Caffe_layers, Interp)
-#else
-TEST_P(Test_Caffe_layers, DISABLED_Interp)  // requires patched protobuf (available in OpenCV source tree only)
-#endif
 {
+#ifdef OPENCV_DNN_EXTERNAL_PROTOBUF
+    throw SkipTestException("Requires patched protobuf");
+#else
 #if defined(INF_ENGINE_RELEASE) && INF_ENGINE_VER_MAJOR_EQ(2021030000)
     if (backend == DNN_BACKEND_INFERENCE_ENGINE_NGRAPH && target == DNN_TARGET_MYRIAD)
         applyTestTag(CV_TEST_TAG_DNN_SKIP_IE_MYRIAD, CV_TEST_TAG_DNN_SKIP_IE_NGRAPH);  // exception
@@ -1668,6 +1683,7 @@ TEST_P(Test_Caffe_layers, DISABLED_Inter
 
     // Test an implemented layer.
     testLayerUsingCaffeModels("layer_interp", false, false);
+#endif
 }
 
 INSTANTIATE_TEST_CASE_P(/*nothing*/, Test_Caffe_layers, dnnBackendsAndTargets());
